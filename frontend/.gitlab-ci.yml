---
cache:
    paths:
        - frontend/dist/frontend
variables:
    VERSION: 1.0.${CI_PIPELINE_ID}
    
stages:
  - build-code
  - test
  - build-docker-front
  - release
  - deploy-dev

services:
  - docker:20.10.12-dind-rootless

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  - remote: 'https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml'

build-code-job:
  stage: build-code
  script:
    - cd frontend 
    - npm install --cache .npm --prefer-offline
    - npm run build
    - cd .. 
    - cp -r frontend/dist/ frontend-${VERSION}/
    - tar -czvf frontend-${VERSION}.tar.gz frontend-${VERSION}
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file frontend-${VERSION}.tar.gz ${NEXUS_FRONT_REPO_URL}/frontend/${VERSION}/frontend-${VERSION}.tar.gz
  artifacts:
    paths:
      - frontend-${VERSION}/  # сохранение собранного фронтэнда как артефакт

sonarqube-frontend-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - cd ${CI_PROJECT_DIR}/frontend/src
    - sonar-scanner -Dsonar.sources=. -Dsonar.qualitygate.wait=true -Dsonar.projectName=${SONAR_PROJECT_FRONTEND} -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND}  -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN_FRONTEND}

build-frontend-docker:
  stage: build-docker-front
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/dumplings-store-frontend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/dumplings-store-frontend:$VERSION

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/dumplings-store-frontend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/dumplings-store-frontend:$VERSION $CI_REGISTRY_IMAGE/dumplings-store-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/dumplings-store-frontend:latest
    
deploy-to-test-frontend:
  stage: deploy-dev
  image: docker:20.10.17-dind
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add openssh-client bash docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - |
        tee -a /etc/ssh/ssh_config << END
        Host std-014-19.praktikum-services.tech
        HostkeyAlgorithms +ssh-rsa
        PubkeyAcceptedAlgorithms +ssh-rsa
        END
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./frontend/nginx.conf ${DEV_USER}@${DEV_HOST}:.
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm -f frontend
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull frontend
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up -d frontend
  environment:
    name: test_frontend
    url: http://${DEV_HOST}
  when: manual