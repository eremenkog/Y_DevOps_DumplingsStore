---
services:
  - docker:20.10.12-dind-rootless

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  - remote: 'https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml'

variables:
    VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build-code
  - build-docker
  - test
  - release
  - deploy-dev
  
build-code-job:
  image: golang:1.17
  stage: build-code
  script:
    - cd backend 
    - go build ./cmd/api/
    - chmod +x api
    - cp api ../api-${VERSION}
    # Загрузка артефакта
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file ../api-${VERSION} ${NEXUS_BACK_REPO_URL}/backend/${VERSION}/api-${VERSION}
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - backend/.go/pkg/mod/
  artifacts:
    paths:
      - api-${VERSION} # сохранение собранного бэкенда как артефакт

build-docker-backend:
  stage: build-docker
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/dumplings-store-backend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/dumplings-store-backend:$VERSION

gosec-sast:
  variables:
    GOPATH: $CI_PROJECT_DIR/backend/.go
  before_script:
    - |
      cat <<EOF > ~/.netrc
      machine gitlab.praktikum-services.ru
      login $GITLAB_USER_LOGIN
      password ${CI_JOB_TOKEN}
      EOF
  script:
    - /analyzer run --target-dir ${CI_PROJECT_DIR}/backend/
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - backend/.go/pkg/mod/

sonarqube-backend-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0" 
  script:
    - cd ${CI_PROJECT_DIR}/backend
    - sonar-scanner -Dsonar.sources=. -Dsonar.qualitygate.wait=true -Dsonar.projectName=${SONAR_PROJECT_BACKEND} -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}  -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN_BACKEND}

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/dumplings-store-backend:$VERSION
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/dumplings-store-backend:$VERSION $CI_REGISTRY_IMAGE/dumplings-store-backend:latest
    - docker push $CI_REGISTRY_IMAGE/dumplings-store-backend:latest

deploy-to-test-backend:
  stage: deploy-dev
  image: docker:20.10.17-dind
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add openssh-client bash docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - |
        tee -a /etc/ssh/ssh_config << END
        Host std-014-19.praktikum-services.tech
        HostkeyAlgorithms +ssh-rsa
        PubkeyAcceptedAlgorithms +ssh-rsa
        END
    - chmod 644 ~/.ssh/known_hosts
  script:
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm -f backend
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up -d backend
  environment:
    name: test_backend
  when: manual